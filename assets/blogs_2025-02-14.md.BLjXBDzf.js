import{_ as e,c as i,o as l,ag as r}from"./chunks/framework.CxJC0ccE.js";const b=JSON.parse('{"title":"跨平台框架的对比（PC 端）","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/2025-02-14.md","filePath":"blogs/2025-02-14.md"}'),t={name:"blogs/2025-02-14.md"};function o(u,a,n,h,s,c){return l(),i("div",null,a[0]||(a[0]=[r('<h1 id="跨平台框架的对比-pc-端" tabindex="-1">跨平台框架的对比（PC 端） <a class="header-anchor" href="#跨平台框架的对比-pc-端" aria-label="Permalink to &quot;跨平台框架的对比（PC 端）&quot;">​</a></h1><h2 id="为什么要用跨平台" tabindex="-1">为什么要用跨平台 <a class="header-anchor" href="#为什么要用跨平台" aria-label="Permalink to &quot;为什么要用跨平台&quot;">​</a></h2><p>目前市场环境下（2025 年），大部分企业都在追求降本增效，这时跨平台就是非常重要的选择了，在多端（PC 端、移动端）上进行快速迭代，尽可能低成本的情况下提升用户体验。本篇将着重介绍一些 PC 端的跨平台框架的对比，以帮助大家做出选择。</p><h2 id="有哪些跨平台框架" tabindex="-1">有哪些跨平台框架 <a class="header-anchor" href="#有哪些跨平台框架" aria-label="Permalink to &quot;有哪些跨平台框架&quot;">​</a></h2><p>目前市场环境下（2025 年），目前比较热门的跨平台框架有：</p><ul><li><a href="https://github.com/electron/electron" target="_blank" rel="noreferrer">Electron</a> （基于 Chromium 的纯 JS 开发框架）</li><li><a href="https://github.com/flutter/flutter" target="_blank" rel="noreferrer">Flutter</a> （基于 Dart 的跨平台开发框架，支持移动和桌面应用）</li><li><a href="https://github.com/tauri-apps/tauri" target="_blank" rel="noreferrer">Tauri</a> （基于 Rust + JS 的跨平台开发框架）</li><li><a href="https://github.com/wailsapp/wails" target="_blank" rel="noreferrer">Wails</a> （基于 Go + JS 的跨平台开发框架）</li></ul><h2 id="electron" tabindex="-1">Electron <a class="header-anchor" href="#electron" aria-label="Permalink to &quot;Electron&quot;">​</a></h2><p>Electron 是一个基于 Chromium 的开源框架，用于开发桌面应用。它允许开发者使用 HTML、CSS 和 JavaScript 来构建跨平台的桌面应用程序。Electron 使用 Node.js 作为其 JavaScript 运行时，因此它具有 Node.js 的所有功能。Electron 支持 Windows、macOS 和 Linux 操作系统。</p><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>绝大部分场景都只需要使用 JavaScript，不需要学习其他语言，可调用数百万 npm 模块，集成第三方库（如 React、Vue）便捷。</li><li>无缝嵌入 Web 内容，可直接调用 Web API 或加载在线服务，适合混合型应用。</li><li>单一代码库，无需为不同平台维护多套代码，长期更新更高效。</li><li>内置固定版本的 Chromium，全平台兼容，基本不需要做额外的适配。</li></ul><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>内存消耗高，每个应用独立运行 Chromium 和 Node.js 进程，多开时内存压力显著（如 Discord 占用约 300MB+），即便是一个简单的 Demo，打包后也会有至少 50MB 的体积。</li><li>启动速度慢，依赖完整渲染进程，冷启动延迟较原生应用明显。</li><li>不适用于高性能场景（计算密集型任务），如视频编辑、3D 渲染等，性能通常弱于原生应用（C++/Rust）。</li><li>若未严格隔离，可能暴露漏洞（如通过 eval 执行恶意代码）。需手动启用安全配置（如上下文隔离、禁用 nodeIntegration）。</li></ul><h2 id="flutter" tabindex="-1">Flutter <a class="header-anchor" href="#flutter" aria-label="Permalink to &quot;Flutter&quot;">​</a></h2><p>Flutter 是 Google 开源的跨平台移动应用框架，使用 Dart 作为其开发语言。它允许开发者使用一套代码库，在多个平台（Android、iOS、Web、Windows、macOS、Linux）上构建应用。Flutter 使用 Dart 语言开发，因此它具有 Dart 的所有功能。Flutter 支持移动和桌面应用，是目前跨平台框架中支持度最高的。</p><h3 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>拥有最完整的跨平台支持，支持移动、桌面、Web 等平台。</li><li>不依赖平台原生组件，直接通过自研的 Skia 引擎绘制 UI，避免跨平台桥接开销，提升渲染性能（如复杂动画流畅度）。</li><li>AOT 编译，Dart 代码编译为原生机器码（iOS/Android），运行时接近原生性能，适合高频交互场景。</li><li>较为完善的热重载（Hot Reload），修改代码后立即预览效果，无需重启应用，加速调试迭代。</li></ul><h3 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>Web 端性能瓶颈，渲染效率低于原生 Web，复杂 DOM 操作或大数据量场景（如表格渲染）性能较弱，可能卡顿。</li><li>某些硬件功能如蓝牙、传感器等需通过平台通道（Platform Channel）调用原生代码，或依赖社区插件（可能维护不足），需要开发者熟悉原生开发，抹平跨平台开发的部分优势。</li><li>Dart 普及度低于 JavaScript/TypeScript，开发者需额外学习语法（如 Stream、Isolate）。</li></ul><h2 id="tauri" tabindex="-1">Tauri <a class="header-anchor" href="#tauri" aria-label="Permalink to &quot;Tauri&quot;">​</a></h2><p>Tauri 是一个基于 Rust + JS 的跨平台开发框架，它允许开发者使用 Rust 和 JavaScript 来构建跨平台的桌面应用程序。Tauri 使用 Rust 作为其 JavaScript 运行时，因此它具有 Rust 的所有功能。Tauri 支持 Windows、macOS 和 Linux 操作系统。</p><h3 id="优点-2" tabindex="-1">优点 <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>不打包 Chromium，直接调用操作系统自带的 Web 渲染引擎（如 Windows WebView2、macOS WKWebView），安装包体积可缩小至 5MB 以下。单进程架构，无独立 Node.js 运行时，内存消耗比 Electron 减少 50%-80% （例如，相同功能的 Tauri 应用可能仅占用 50MB 内存）。</li><li>核心逻辑使用 Rust 编写，编译为原生机器码，适用于计算密集型任务（如文件加密、数据处理），性能接近 C++。通过 Rust 直接访问操作系统原生功能（如系统托盘、剪贴板、硬件传感器），无需依赖插件。</li><li>自动启用 CSP（内容安全策略）、隔离前端与后端通信（通过 IPC 加密通道），降低 XSS 攻击风险。</li><li>可与 React、Vue、Svelte 等现代前端框架无缝集成，保留现有 Web 开发生态，且允许将现有 Web 项目逐步改造为桌面应用，无需重写代码。</li><li>2.0 版本开始支持移动端开发。</li></ul><h3 id="缺点-2" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>由于没有内置 Chromium，依赖系统 WebView 的兼容性，所以在老旧的操作系统中（如 Windows 7、macOS 10.6）可能无法运行，需要手动安装 WebView 的更新，增加了用户门槛。不同平台的 WebView 行为不一致（如 CSS 特性支持度），需额外测试适配。</li><li>若需深度定制后端逻辑，开发者需掌握 Rust 的所有权、生命周期等概念，对前端团队构成挑战。相比 JavaScript，Rust 的第三方库数量较少，复杂功能可能需自行实现（如 FFmpeg 集成）。</li><li>虽已支持移动端，但 Android/iOS 编译仍处于早期阶段，API 覆盖不全，社区案例稀缺，且移动端渲染可能因 WebView 性能瓶颈导致卡顿（如复杂动画），优化难度高。</li><li>需同时调试前端代码、Rust 后端及 IPC 通信，工具链整合不如 Electron 直观。</li></ul><h2 id="wails" tabindex="-1">Wails <a class="header-anchor" href="#wails" aria-label="Permalink to &quot;Wails&quot;">​</a></h2><p>Wails 是一个基于 Go + JS 的跨平台开发框架，它允许开发者使用 Go 和 JavaScript 来构建跨平台的桌面应用程序。Wails 使用 Go 作为其 JavaScript 运行时，因此它具有 Go 的所有功能。Wails 支持 Windows、macOS 和 Linux 操作系统。</p><h3 id="优点-3" tabindex="-1">优点 <a class="header-anchor" href="#优点-3" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>打包体积和性能表现和 Tauri 类似，编译速度相比 Tauri 更快，且性能相差不大。</li><li>Go 语言相比 Rust 上手更简单，Go 的 Goroutine 和 Channel 机制轻松处理多线程任务（如实时数据同步）。</li></ul><h3 id="缺点-3" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-3" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>与 Tauri 类似，基于系统内置 Webview 的模式使得页面兼容性存在较大的挑战，需要手动适配。</li><li>原生功能如蓝牙、摄像头等硬件访问需通过 Go 或 C 扩展实现，社区插件数量较少。</li><li>基础能力暂时不足，多窗口等需求还未支持。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>在开发大型应用时，如果团队整体水平较高或者是已经熟悉了 Rust，个人更推荐使用 Tauri 开发，即便是微软这类大型公司在 Electron 上的使用也面临严重性能瓶颈（teams 弃用 Electron 改用基于 Webview2 的架构，vscode 的 issues 也有很多人发声希望切换别的 Webview2 框架）。且作为一名 Web 开发者来说，Rust 是值得学习的语言。如果是短平快的应用（如内部使用的工具型应用），Wails 较为平稳的上手曲线且不输 Tauri 的性能表现则更适合。Flutter 目前来说 PC 端开发的难度较大，社区支持度较低，且性能表现不如 Tauri 等，Web 端性能瓶颈也较大，相比来说更适合在移动端开发。Electron 虽然性能不如前面的方案，但是这么多年的发展积攒了庞大的社区，几乎所有问题都有解决方案，且社区活跃度很高，在极度追求稳定的应用中，它是不二选择，且 Electron 也能调用其他语言编译的插件，如 C/C++/Rust 等（vscode 部分性能敏感的模块已迁移到了 Rust）。</p><p>最后推荐一下博主自己写的一个小工具箱，就是基于 Tauri 开发的，仓库地址：<a href="https://github.com/DanielShuguang/tool-box" target="_blank" rel="noreferrer">https://github.com/DanielShuguang/tool-box</a></p>',33)]))}const m=e(t,[["render",o]]);export{b as __pageData,m as default};
