import{_ as i,c as n,o as a,ag as t}from"./chunks/framework.CxJC0ccE.js";const d=JSON.parse('{"title":"unplugin-vue-components 在 vite 中的使用和配置","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/2022-02-21.md","filePath":"blogs/2022-02-21.md"}'),e={name:"blogs/2022-02-21.md"};function l(p,s,h,r,o,k){return a(),n("div",null,s[0]||(s[0]=[t(`<h1 id="unplugin-vue-components-在-vite-中的使用和配置" tabindex="-1">unplugin-vue-components 在 vite 中的使用和配置 <a class="header-anchor" href="#unplugin-vue-components-在-vite-中的使用和配置" aria-label="Permalink to &quot;unplugin-vue-components 在 vite 中的使用和配置&quot;">​</a></h1><p>unplugin-vue-components 是由 Vue 官方人员开发的一款自动引入插件，可以省去比如 UI 库的大量 import 语句。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unplugin-vue-components</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { AntDesignVueResolver } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;unplugin-vue-components/resolvers&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Components </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;unplugin-vue-components/vite&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Components</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      dirs: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/components&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 配置需要默认导入的自定义组件文件夹，该文件夹下的所有组件都会自动 import</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      resolvers: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AntDesignVueResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ importStyle: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, resolveIcons: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><p>这里以 ant-design-vue 为例，引入包里自带的 <strong>AntDesignVueResolver</strong> 函数（主流的 UI 都有内置，如果没有的话可以自己实现一个 resolver）。<strong>importStyle</strong> 指是否需要自动随引入加载对应的组件样式，我这里设置为 false，因为某些二级组件（比如 DateRangePicker）没办法准确地识别正确路径，他的搜寻路径都是按一级组件来写的，所以我改成了全量导入 css。<strong>resolveIcons</strong> 配置是否对 antd 的图标起作用。</p></li><li><p>配置完 js 引入，如果使用 ts 写项目的话，当然就要考虑类型的问题了，自动引入确实可以省略引入，但是这样也失去了类型提示。antv 提供了一个 <strong>global.d.ts</strong> 类型声明文件（实测 element-plus 也提供了这一类型文件)，只需要在 tsconfig 的 types 项下添加 <strong>ant-design-vue/typings/global</strong> 即可提供组件的类型声明。没有引入也有组件类型提示：<img src="https://img2022.cnblogs.com/blog/2299259/202202/2299259-20220221175908924-1497440148.png" alt=""></p></li><li><p>想必你已经看到了 <strong>dirs</strong> 这个配置项了，他不仅可以实现 UI 框架自动引入，还支持你自己项目中开发的公共组件自动引入。<strong>dirs</strong> 这个配置的默认值就是 <code>src/components</code> ，如果你想取其他的文件夹名也是可以的，在检测到你在使用 ts 之后，他会自动在项目根目录生成一个 <strong>compnents.d.ts</strong> 里面即是根据组件内容生成的类型声明，为 volar 提供类型提示，他会自动根据文件变动进行更新。（注意：compnents.d.ts 文件会在 vue-tsc 运行的时候进行更新，建议把他加入 gitignore 中，以免出现频繁更改导致 git 监测到项目内容一直变动的问题）</p><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><p>这个包大大地简洁了业务代码，以后再也不用写一大堆的 import 了，但是所有的这一切都基于你写的是 Vue 单文件组件，如果是喜欢用 jsx 编写 Vue 代码的童鞋，那他就帮不了你了。还有就是因为他是编译时动态加入 import 语句，所以在单元测试的时候，测试框架可能会提示缺少引入，这个就要等 Vite 官方对它针对适配了，如果现阶段需要用到测试代码的童鞋则不太适合。</p></li></ul>`,7)]))}const c=i(e,[["render",l]]);export{d as __pageData,c as default};
